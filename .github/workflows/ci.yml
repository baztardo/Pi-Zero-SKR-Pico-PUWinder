name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  # =============================================================================
  # Code Quality Checks
  # =============================================================================
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Python dependencies
        run: |
          cd pi_zero
          pip install -r requirements.txt

      - name: Lint Python code
        run: |
          pip install flake8 black isort
          cd pi_zero
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check .
          isort --check-only .

      - name: Type checking
        run: |
          pip install mypy
          cd pi_zero
          mypy *.py --ignore-missing-imports

  # =============================================================================
  # Pico Firmware Build Test
  # =============================================================================
  build-pico-firmware:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Pico SDK
        run: |
          git clone https://github.com/raspberrypi/pico-sdk.git
          cd pico-sdk
          git submodule update --init
          echo "PICO_SDK_PATH=$PWD" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake gcc-arm-none-eabi libnewlib-arm-none-eabi build-essential

      - name: Build Pico firmware
        run: |
          cd pico_firmware
          mkdir build && cd build
          cmake ..
          make -j$(nproc)

      - name: Upload firmware artifacts
        uses: actions/upload-artifact@v3
        with:
          name: pico-firmware
          path: pico_firmware/build/pico_spindle_controller.uf2

  # =============================================================================
  # Pi Zero Testing
  # =============================================================================
  test-pi-zero:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          cd pi_zero
          pip install -r requirements.txt

      - name: Run unit tests
        run: |
          cd pi_zero
          python -m pytest test_*.py -v

      - name: Test UART communication (simulated)
        run: |
          cd pi_zero
          python test_uart.py --simulate

  # =============================================================================
  # Integration Testing
  # =============================================================================
  integration-test:
    runs-on: ubuntu-latest
    needs: [code-quality, build-pico-firmware, test-pi-zero]
    steps:
      - uses: actions/checkout@v4

      - name: Download firmware artifacts
        uses: actions/download-artifact@v3
        with:
          name: pico-firmware

      - name: Run integration tests
        run: |
          cd pi_zero
          python test_klipper_architecture.py --simulate
          python test_gcode_interface.py --simulate

  # =============================================================================
  # Security Scanning
  # =============================================================================
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"

  # =============================================================================
  # Documentation Generation
  # =============================================================================
  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install documentation tools
        run: |
          pip install sphinx sphinx-rtd-theme
          sudo apt-get install -y doxygen graphviz

      - name: Generate documentation
        run: |
          # Generate C++ documentation
          doxygen Doxyfile

          # Generate Python documentation
          cd pi_zero
          sphinx-build -b html . ../docs/html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/html
