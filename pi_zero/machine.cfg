# =============================================================================
# Machine Configuration for Pick-up Winder
# Purpose: Configuration for Pi Zero + Pico winding machine
# 
# Note: This system uses G-code compatible architecture inspired by
# open-source 3D printing firmware but is a standalone implementation
# =============================================================================

# =============================================================================
# MCU Configuration (Pico)
# =============================================================================
[mcu]
serial: /dev/serial0
baud: 115200

# =============================================================================
# Spindle Configuration (BLDC Motor) - G-code Compatible
# =============================================================================
[spindle]
# BLDC motor control via PWM (user specified pins)
pin: gpio24          # PWM output
enable_pin: gpio21    # HB_PIN (MOSFET output)
direction_pin: gpio4  # Direction control
brake_pin: gpio3      # Brake/Stop control
# Hall sensor for RPM feedback
hall_pin: gpio22      # HAL sensor input
pulses_per_revolution: 4
max_rpm: 3000
min_rpm: 10
# G-code compatibility
toolhead: toolhead

# =============================================================================
# Y-Axis Traverse Stepper Motor (ONLY Y-AXIS)
# =============================================================================
[stepper_y]
step_pin: gpio6        # Y_STEP_PIN from pins file
dir_pin: gpio5         # Y_DIR_PIN from pins file  
enable_pin: !gpio7      # Y_EN_PIN from pins file
microsteps: 16
rotation_distance: 8.0  # 8mm lead screw
gear_ratio: 1:1
max_velocity: 50.0
max_accel: 1000.0
max_decel: 1000.0
position_endstop: gpio16  # E0_STOP_PIN from pins file (home switch)
position_min: 0.0
position_max: 200.0  # Matches config.h MAX_TRAVERSE_POS_MM
homing_speed: 10.0
homing_retract_dist: 5.0

# =============================================================================
# TMC2209 Configuration for Y-axis
# =============================================================================
[tmc2209 stepper_y]
uart_pin: gpio8        # TMC_UART_TX_PIN from pins file
interrupt_pin: gpio9   # TMC_UART_RX_PIN from pins file
run_current: 0.8
hold_current: 0.3
stealthchop_threshold: 0
microsteps: 16
uart_address: 0

# =============================================================================
# Winding Process Configuration
# =============================================================================
[winding_process]
# Winding parameters
wire_diameter: 0.064  # 43 AWG
layer_width: 50.0
start_position: 20.0
ramp_time: 3.0
# Traverse movement
traverse_pitch: 0.064  # Same as wire diameter for tight winding
traverse_speed: 10.0
# Spindle control
spindle_rpm: 300.0
spindle_ramp_time: 3.0

# =============================================================================
# Safety Configuration
# =============================================================================
[emergency_stop]
pin: gpio2
# Emergency stop button

[watchdog]
timeout: 5.0
# Watchdog timer for safety

# =============================================================================
# Display Configuration (Pi Zero LCD)
# =============================================================================
[display]
lcd_type: hd44780
columns: 20
lines: 4

# =============================================================================
# Winding Macros (Y-axis only + G-code Spindle Control)
# =============================================================================
[gcode_macro WINDING_START]
gcode:
    # Start winding process
    M3 S{params.RPM|300}  # Start spindle clockwise
    G28 Y                 # Home Y-axis only
    G1 Y{params.START_Y|20} F1000  # Move traverse to start position
    SET_PIN PIN=winding_led VALUE=1  # Turn on winding LED

[gcode_macro WINDING_LAYER]
gcode:
    # Move to next layer (Y-axis only)
    G1 Y{params.LAYER_POS|0} F{params.SPEED|10}  # Move traverse to layer position
    SET_PIN PIN=layer_led VALUE=1  # Turn on layer LED

[gcode_macro WINDING_SYNC]
gcode:
    # Synchronize traverse with spindle RPM
    # Calculate traverse speed based on spindle RPM and wire diameter
    {% set rpm = params.RPM|300 %}
    {% set wire_diameter = params.WIRE_DIAMETER|0.064 %}
    {% set traverse_speed = (rpm * wire_diameter) / 60.0 %}  # mm/s
    G1 Y{params.TARGET_Y|0} F{traverse_speed * 60}  # Move traverse synchronized to spindle

[gcode_macro WINDING_STOP]
gcode:
    # Stop winding process
    M5                    # Stop spindle
    SET_PIN PIN=winding_led VALUE=0  # Turn off winding LED
    SET_PIN PIN=layer_led VALUE=0    # Turn off layer LED

[gcode_macro WINDING_EMERGENCY]
gcode:
    # Emergency stop
    M5                    # Stop spindle immediately
    G1 Y0 F1000          # Move traverse to home position
    SET_PIN PIN=winding_led VALUE=0  # Turn off all LEDs
    SET_PIN PIN=layer_led VALUE=0

# =============================================================================
# Standard G-code Spindle Commands
# =============================================================================
[gcode_macro M3]
gcode:
    # Start spindle clockwise
    {% set speed = params.S|0 %}
    {% if speed > 0 %}
        SET_PIN PIN=spindle_enable VALUE=1
        SET_PIN PIN=spindle_direction VALUE=1
        SET_PWM_FREQUENCY PIN=spindle_pwm FREQUENCY=1000
        SET_PWM_DUTY_CYCLE PIN=spindle_pwm DUTY_CYCLE={speed / 3000.0 * 100}
    {% else %}
        SET_PIN PIN=spindle_enable VALUE=1
        SET_PIN PIN=spindle_direction VALUE=1
    {% endif %}

[gcode_macro M4]
gcode:
    # Start spindle counter-clockwise
    {% set speed = params.S|0 %}
    {% if speed > 0 %}
        SET_PIN PIN=spindle_enable VALUE=1
        SET_PIN PIN=spindle_direction VALUE=0
        SET_PWM_FREQUENCY PIN=spindle_pwm FREQUENCY=1000
        SET_PWM_DUTY_CYCLE PIN=spindle_pwm DUTY_CYCLE={speed / 3000.0 * 100}
    {% else %}
        SET_PIN PIN=spindle_enable VALUE=1
        SET_PIN PIN=spindle_direction VALUE=0
    {% endif %}

[gcode_macro M5]
gcode:
    # Stop spindle
    SET_PIN PIN=spindle_enable VALUE=0
    SET_PWM_DUTY_CYCLE PIN=spindle_pwm DUTY_CYCLE=0

[gcode_macro S]
gcode:
    # Set spindle speed
    {% set speed = params.S|0 %}
    {% if speed > 0 %}
        SET_PWM_DUTY_CYCLE PIN=spindle_pwm DUTY_CYCLE={speed / 3000.0 * 100}
    {% endif %}

# =============================================================================
# Winding Machine M-codes (Essential Only)
# =============================================================================
[gcode_macro M6]
gcode:
    # Tool change (wire change)
    M5                    # Stop spindle
    G1 Y0 F1000          # Move traverse to home
    SET_PIN PIN=debug_led VALUE=1
    RESPOND MSG="Wire change required - M6 executed"

[gcode_macro M7]
gcode:
    # Coolant on (air blast for wire cleaning) - Using debug LED
    SET_PIN PIN=debug_led VALUE=1
    RESPOND MSG="Coolant on (simulated)"

[gcode_macro M8]
gcode:
    # Coolant off
    SET_PIN PIN=debug_led VALUE=0
    RESPOND MSG="Coolant off"

[gcode_macro M9]
gcode:
    # Coolant off (same as M8)
    SET_PIN PIN=debug_led VALUE=0
    RESPOND MSG="Coolant off"

[gcode_macro M10]
gcode:
    # Enable traverse brake (simulated - no physical brake)
    RESPOND MSG="Traverse brake engaged (simulated)"

[gcode_macro M11]
gcode:
    # Disable traverse brake (simulated)
    RESPOND MSG="Traverse brake released (simulated)"

[gcode_macro M12]
gcode:
    # Enable spindle brake
    SET_PIN PIN=spindle_brake VALUE=1
    RESPOND MSG="Spindle brake engaged"

[gcode_macro M13]
gcode:
    # Disable spindle brake
    SET_PIN PIN=spindle_brake VALUE=0
    RESPOND MSG="Spindle brake released"

[gcode_macro M14]
gcode:
    # Enable wire tension (simulated - no physical tensioner)
    RESPOND MSG="Wire tension enabled (simulated)"

[gcode_macro M15]
gcode:
    # Disable wire tension (simulated)
    RESPOND MSG="Wire tension disabled (simulated)"

[gcode_macro M16]
gcode:
    # Home all axes
    G28 Y
    RESPOND MSG="All axes homed"

[gcode_macro M17]
gcode:
    # Enable steppers (using stepper enable pin)
    SET_PIN PIN=stepper_y_enable VALUE=1
    RESPOND MSG="Steppers enabled"

[gcode_macro M18]
gcode:
    # Disable steppers
    SET_PIN PIN=stepper_y_enable VALUE=0
    RESPOND MSG="Steppers disabled"

[gcode_macro M19]
gcode:
    # Spindle orientation (for precise positioning) - simulated
    RESPOND MSG="Spindle orientation enabled (simulated)"

[gcode_macro M42]
gcode:
    # Set pin state (GPIO control)
    {% set pin = params.P|0 %}
    {% set value = params.S|0 %}
    SET_PIN PIN=gpio{pin} VALUE={value}
    RESPOND MSG="Pin gpio{pin} set to {value}"

# =============================================================================
# GPIO Pins (Based on pins_skr-pico_v1.md)
# =============================================================================
[output_pin spindle_enable]
pin: gpio21    # HB_PIN (MOSFET output)
value: 0

[output_pin spindle_direction]
pin: gpio4     # Direction control
value: 0

[output_pin spindle_brake]
pin: gpio3     # Brake/Stop control
value: 0

[pwm spindle_pwm]
pin: gpio24    # RGB_PIN (PWM capable)
frequency: 1000
value: 0

# Debug LED (FAN2_PIN from pins file - MOSFET output)
[output_pin debug_led]
pin: gpio18
value: 0

# Stepper enable (Y_EN_PIN from pins file)
[output_pin stepper_y_enable]
pin: gpio7
value: 0

# =============================================================================
# End of Configuration
# =============================================================================
